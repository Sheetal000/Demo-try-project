c
mail(to: @user.email)
@user.email
@user = params[:user]
params[:user]
params
c
UserMailer.send_greeting(@user, @message).deliver_later
@user.save
@user = User.new(create_params)
c
@user.save
@user
@user = User.new(create_params)
c
@user
c
@user
User.find_by_email(params[:email])
@user
c
resource.email
resource
c
continue
c
token
c
token
c
token
decoded = JWT.decode(token, SECRET_KEY)[0]
token
c
 @user&.authenticate(params[:password])
@user
c
User.first
User.find_by(email: params[:email])
User.find_by_email(params[:email])
params[:email]
User.all
params[:email]
@user
c
token
c
token
c
User.new(email: "demo@yopmail.com", password: "password", password_confirmation: "password")c
User.new(email: "demo@yopmail.com", password: "password", password_confirmation: "password").id
User.new(email: "demo@yopmail.com", password: "password", password_confirmation: "password")
create_params
c
@user.save!
@user.save
c
 @user.save
@user = User.new(create_params)
@user
c
post
f.actions
c
@current_user_like = @post.likes.find_by(user_id: params[:user_id])
c
@current_user_like = @post.likes.find_by(user_id: current_user.id)
c
@current_user_like
c
{message: "Post not found"}, status: :not_found unless @post
@post = Post.find_by_id(params[:id])
c
params[:id]
params
@post = Post.find_by_id(params[:id])
c
@post = Post.find_by_id(params[:id])
c
@post
@current_user_like = @post.likes.find_by(user_id: current_user.id)
c
@post
@current_user_like = @post.likes.find_by(user_id: (current_user.id || params[:user_id].to_i ) )
c
current_user
current_user.id
c
cc
c
render json: {message: "Post not found"}, status: :not_found unless @post.present?
@post = Post.find_by_id(params[:id])
c
render json: {message: "Post not found"}, status: :not_found if !@post.present?
@post = Post.find_by_id(params[:id])
c
render json: {message: "Post not found"}, status: :not_found unless @post
@post = Post.find_by_id(params[:id])
c
render json: {message: "Post not found"}, status: :not_found unless @post
@post = Post.find_by_id(params[:id])
c
@post = Post.find_by_id(params[:id])
c@post = Post.find_by_id(params[:id])
c
params[:posts]
params[:post]
params
id
@post = Post.find_by_id(params[:id])
c
expect(response.status).to eq 200
put :like_post,params:{id: @user.id}
@user.id
put :like_post,params:{id: @user.id}
c
@user.id
@userid
@user
put :like_post,params:{id: @post.id, id: @user.id}
c
@post.user_id = current_user.id
@post = Post.new(post_params)
c
params
c
n
nn
n
c
posts
continue
c
require
request
self
continue
c
current_user
c
@post.update(post_params)
@post
c
@post
c
@post.errors.full_messages
@post.errors
@post
c
current_user_like
current_user_like.update(active: false)
current_user_like
current_user_like = @post.likes.find_by(user_id: current_user.id)
@post = Post.find(params[:id])
c
current_count = self.post.likes.where(active: true).size
c
current_user_like = @post.likes.find_by(user_id: current_user.id)
@post = Post.find(params[:id])
c
self.post.likes
self
current_user
c
@post.likes
current_user_like = @post.likes.find_by(user_id: current_user.id)
@post = Post.find(params[:id])
c
current_count = self.post.likes.where(active: true).size
self.post.likes.count
self.post.likes
self
post.likes.where(active: true).size
self
c
self.post.likes.where(active: true).size
current_count
c
current_count = self.post.likes.where(active: true).size
c
current_user_like.update(active: false)
c
total_count = self.active ? current_count + 1 : current_count - 1
self.active
current_count = self.post.likes.where(active: true).size
self.post.likes.count
self.post.likes
self.post
self
self.postself
c
self.active
self.post.likes.size
c
self.post.like_count
current_count = self.post.likes.count
current_count = self.post.likes
current_count = self.post.like_count.to_i
self
c
@post.likes.find_by(user_id: current_user.id)
already_liked?
c
@post.likes.where(user_id: current_user.id)
@post.likes.where(user_id: current_user.id).last.delete
@post.likes.where(user_id: current_user.id).count
@post.likes.where(user_id: current_user.id)
@post.likes.find_by(user_id: current_user.id)
c
@post.likes.find_by(user_id: current_user.id).update(active: false)
@post.likes.find_by(user_id: current_user.id)
post.likes.find_by(user_id: current_user.id)
already_liked?
c
already_liked?
c
